{"version":3,"sources":["App.js","index.js"],"names":["colorScale","scaleLinear","domain","range","MapChart","date","countries","json","ret","key","swap","JSON","parse","stringify","jsonData","useState","data","setData","useEffect","console","log","process","csv","then","day","getDate","mounth","getMonth","year","getFullYear","filter","entry","parseInt","split","projectionConfig","rotate","scale","stroke","strokeWidth","length","geography","geographies","map","geo","d","find","s","country_region","properties","ISO_A2","fill","rsmKey","App","Date","startDate","setStartDate","selected","onChange","rootElement","document","getElementById","ReactDOM","render"],"mappings":"qNAiBMA,EAAaC,cAChBC,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,UAAW,YASrB,IAgDeC,EAhDE,SAACC,GAEhB,IAAIC,EAEJA,EAXF,SAAcC,GACV,IAAIC,EAAM,GACV,IAAI,IAAIC,KAAOF,EACbC,EAAID,EAAKE,IAAQA,EAEnB,OAAOD,EAMGE,CADWC,KAAKC,MAAMD,KAAKE,UAAUC,KAHxB,MAKDC,mBAAS,IALR,mBAKlBC,EALkB,KAKZC,EALY,KAmBzB,OAbAC,qBAAU,WACRC,QAAQC,IAAIC,uBACZC,YAAID,uBAAsCE,MAAK,SAACP,GAC9CG,QAAQC,IAAIJ,GACZ,IAAIQ,EAAMnB,EAAKA,KAAKoB,UAChBC,EAASrB,EAAKA,KAAKsB,WACnBC,EAAOvB,EAAKA,KAAKwB,cACrBb,EAAOA,EAAKc,QAAO,SAACC,GAAD,OAAWC,SAASD,EAAM1B,KAAK4B,MAAM,KAAK,MAAQL,GAAQI,SAASD,EAAM1B,KAAK4B,MAAM,KAAK,MAAQP,GAAUM,SAASD,EAAM1B,KAAK4B,MAAM,KAAK,MAAQT,KACrKP,EAAQD,QAGT,CAACX,IAGF,eAAC,gBAAD,CACE6B,iBAAkB,CAChBC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,KAHX,UAME,cAAC,SAAD,CAAQC,OAAO,UAAUC,YAAa,KACtC,cAAC,YAAD,CAAWD,OAAO,UAAUC,YAAa,KACxCtB,EAAKuB,OAAS,GACb,cAAC,cAAD,CAAaC,UA1CnB,yGA0CM,SACG,qBAAGC,YACUC,KAAI,SAACC,GACf,IAAMC,EAAI5B,EAAK6B,MAAK,SAACC,GAAD,OAAOxC,EAAUwC,EAAEC,kBAAoBJ,EAAIK,WAAWC,QAAgC,OAArBH,EAAEC,gBAA2BD,EAAEC,iBAAmBJ,EAAIK,WAAWC,UACtJ,OACE,cAAC,YAAD,CAEET,UAAWG,EACXO,KAAMN,EAAI5C,EAAW4C,EAAC,iBAAuB,WAFxCD,EAAIQ,kBCvD3B,SAASC,IAAO,IAAD,EACqBrC,mBAAS,IAAIsC,MADlC,mBACNC,EADM,KACKC,EADL,KAEb,OACE,gCACE,cAAC,IAAD,CAAYC,SAAUF,EAAWG,SAAU,SAAApD,GAAI,OAAIkD,EAAalD,MAChE,cAAC,EAAD,CAAWA,KAAMiD,OAKvB,IAAMI,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,I","file":"static/js/main.bfbba1a6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\nimport jsonData from './toISO2.json';\n\n \nimport \"react-datepicker/dist/react-datepicker.css\";\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0, 60000])\n  .range([\"#ffcccc\", \"#ff0000\"]);\n\nfunction swap(json){\n    var ret = {};\n    for(var key in json){\n      ret[json[key]] = key;\n    }\n    return ret;\n  }\nconst MapChart = (date) => {\n\n  let countries = []\n  const loadData = () => JSON.parse(JSON.stringify(jsonData));\n  countries = swap(loadData());\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    console.log(process.env.PUBLIC_URL + `cases.csv`)\n    csv(process.env.PUBLIC_URL + `cases.csv`).then((data) => {\n      console.log(data)\n      let day = date.date.getDate();\n      let mounth = date.date.getMonth();\n      let year = date.date.getFullYear();\n      data = data.filter((entry) => parseInt(entry.date.split(\"-\")[0]) === year && parseInt(entry.date.split(\"-\")[1]) === mounth && parseInt(entry.date.split(\"-\")[2]) === day);\n      setData(data);\n    });\n\n  }, [date]);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => {\n              const d = data.find((s) => countries[s.country_region] === geo.properties.ISO_A2 || (s.country_region === \"US\" && s.country_region === geo.properties.ISO_A2));\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"confirmed_cases\"]) : \"#F5F4FF\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport DatePicker from \"react-datepicker\";\n \nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport MapChart from \"./App\";\n\nfunction App() {\n  const [startDate, setStartDate] = useState(new Date());\n  return (\n    <div>\n      <DatePicker selected={startDate} onChange={date => setStartDate(date)} />\n      <MapChart  date={startDate}/>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}